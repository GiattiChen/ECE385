// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2020 21:04:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          control_logic_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module control_logic_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg FETCH;
reg HIGH;
reg LDSBR;
reg LOW;
reg SAR0;
reg SAR1;
reg STORE;
// wires                                               
wire A;
wire B;
wire Qa;
wire Qb;
wire Qc;
wire Qd;
wire select;

// assign statements (if any)                          
control_logic_test i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CLOCK(CLOCK),
	.FETCH(FETCH),
	.HIGH(HIGH),
	.LDSBR(LDSBR),
	.LOW(LOW),
	.Qa(Qa),
	.Qb(Qb),
	.Qc(Qc),
	.Qd(Qd),
	.SAR0(SAR0),
	.SAR1(SAR1),
	.select(select),
	.STORE(STORE)
);
initial 
begin 
#1000000 $finish;
end 

// HIGH
initial
begin
	HIGH = 1'b1;
end 

// LOW
initial
begin
	LOW = 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 

// SAR0
initial
begin
	SAR0 = 1'b0;
end 

// SAR1
initial
begin
	SAR1 = 1'b0;
end 

// FETCH
initial
begin
	FETCH = 1'b0;
	FETCH = #240000 1'b1;
	FETCH = #180000 1'b0;
end 

// LDSBR
initial
begin
	LDSBR = 1'b0;
	LDSBR = #60000 1'b1;
	LDSBR = #120000 1'b0;
end 

// STORE
initial
begin
	STORE = 1'b0;
	STORE = #460000 1'b1;
	STORE = #180000 1'b0;
end 
endmodule

