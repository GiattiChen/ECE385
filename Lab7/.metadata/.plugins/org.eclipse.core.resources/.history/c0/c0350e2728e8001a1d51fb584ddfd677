//// Main.c - makes LEDG0 on DE2-115 board blink if NIOS II is set up correctly
//// for ECE 385 - University of Illinois - Electrical and Computer Engineering
//// Author: Zuofu Cheng
////
////int main()
////{
////	int i = 0;
////	volatile unsigned int *LED_PIO = (unsigned int*)0x40; //make a pointer to access the PIO block
////
////	*LED_PIO = 0; //clear all LEDs
////	while ( (1+1) != 3) //infinite loop
////	{
////		for (i = 0; i < 100000; i++); //software delay
////		*LED_PIO |= 0x1; //set LSB
////		for (i = 0; i < 100000; i++); //software delay
////		*LED_PIO &= ~0x1; //clear LSB
////	}
////	return 1; //never gets here
////}
////
//
//int main()
//{
//	volatile unsigned int *KEY_PIO = (unsigned int*)0x60;
//	volatile unsigned int *SW_PIO  = (unsigned int*)0x50;
//	volatile unsigned int *LED_PIO = (unsigned int*)0x70;
//
//	*LED_PIO = 0;
//	int Reset = 1;
//	int Accumulate = 1;
//	volatile unsigned int count = 0;
//
//	while (1)
//	{
//		// &KEY == 0 when KEY is not pressed
//		// &KEY == 1 when KEY is pressed
//		// from left -> right, KEY[3] -> KEY[0] on the board
//		// *KEY_PIO is equal to as {KEY[3],KEY[2]}, which is defined in lab7.sv
//		if (count >= 256){
//			count -= 256;
//		}
//		*LED_PIO = count;
//
//		if ((*KEY_PIO & 0x1)==0){
//			Reset = 1;
//		}
//		if ((*KEY_PIO & 0x2)==0){
//			Accumulate = 1;
//		}
//
//		// Here Reset==1 means reset is pressed
//		if ((*KEY_PIO & 0x1)!=0 && Reset==1){
//			count = 0;
//			// when KEY[2] is pressed for a while, we only reset once by setting Reset back to 0
//			Reset = 0;
//		}
//		if ((*KEY_PIO & 0x2)!=0 && Accumulate==1){
//			count += (*SW_PIO) ;
//			// when KEY[3] is pressed for a while, we only accumulate once by setting Accumulate back to 0
//			Accumulate = 0;
//		}
//
//
//	}
//	return 1;
//}
// Main.c - makes LEDG0 on DE2-115 board blink if NIOS II is set up correctly
// for ECE 385 - University of Illinois - Electrical and Computer Engineering
// Author: Zuofu Cheng

int main()
{
	int i = 0;
	volatile unsigned int *LED_PIO = (unsigned int*)0x70; //make a pointer to access the PIO block

	*LED_PIO = 0; //clear all LEDs
	while ( (1+1) != 3) //infinite loop
	{
		for (i = 0; i < 100000; i++); //software delay
		*LED_PIO |= 0x1; //set LSB
		for (i = 0; i < 100000; i++); //software delay
		*LED_PIO &= ~0x1; //clear LSB
	}
	return 1; //never gets here
}
