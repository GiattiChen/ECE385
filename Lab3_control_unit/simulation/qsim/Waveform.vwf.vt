// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/11/2020 21:35:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab3_control_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab3_control_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg EXECUTE;
reg high;
reg LOAD_A;
reg LOAD_B;
reg low;
// wires                                               
wire C0;
wire C1;
wire Q;
wire SA0;
wire SA1;
wire SB0;
wire SB1;
wire SHIFT;

// assign statements (if any)                          
lab3_control_unit i1 (
// port map - connection between master ports and signals/registers   
	.C0(C0),
	.C1(C1),
	.CLK(CLK),
	.EXECUTE(EXECUTE),
	.high(high),
	.LOAD_A(LOAD_A),
	.LOAD_B(LOAD_B),
	.low(low),
	.Q(Q),
	.SA0(SA0),
	.SA1(SA1),
	.SB0(SB0),
	.SB1(SB1),
	.SHIFT(SHIFT)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #2500 1'b1;
	#2500;
end 

// high
initial
begin
	high = 1'b1;
end 

// low
initial
begin
	low = 1'b0;
end 

// EXECUTE
initial
begin
	EXECUTE = 1'b0;
	EXECUTE = #225000 1'b1;
	EXECUTE = #5000 1'b0;
	EXECUTE = #5000 1'b1;
	EXECUTE = #5000 1'b0;
	EXECUTE = #20000 1'b1;
	EXECUTE = #40000 1'b0;
	EXECUTE = #40000 1'b1;
	EXECUTE = #40000 1'b0;
	EXECUTE = #40000 1'b1;
	EXECUTE = #120000 1'b0;
	EXECUTE = #40000 1'b1;
	# 40000;
	repeat(2)
	begin
		EXECUTE = 1'b0;
		EXECUTE = #40000 1'b1;
		# 40000;
	end
	EXECUTE = 1'b0;
	EXECUTE = #45000 1'b1;
	EXECUTE = #5000 1'b0;
	EXECUTE = #5000 1'b1;
	EXECUTE = #5000 1'b0;
end 

// LOAD_A
initial
begin
	LOAD_A = 1'b0;
	LOAD_A = #55000 1'b1;
	# 15000;
	repeat(3)
	begin
		LOAD_A = 1'b0;
		LOAD_A = #15000 1'b1;
		# 15000;
	end
	LOAD_A = 1'b0;
	LOAD_A = #15000 1'b1;
	LOAD_A = #5000 1'b0;
	LOAD_A = #335000 1'b1;
	# 15000;
	repeat(3)
	begin
		LOAD_A = 1'b0;
		LOAD_A = #15000 1'b1;
		# 15000;
	end
	LOAD_A = 1'b0;
	LOAD_A = #15000 1'b1;
	LOAD_A = #5000 1'b0;
end 

// LOAD_B
initial
begin
	LOAD_B = 1'b0;
	LOAD_B = #275000 1'b1;
	# 15000;
	repeat(3)
	begin
		LOAD_B = 1'b0;
		LOAD_B = #15000 1'b1;
		# 15000;
	end
	LOAD_B = 1'b0;
	LOAD_B = #15000 1'b1;
	LOAD_B = #5000 1'b0;
end 
endmodule

